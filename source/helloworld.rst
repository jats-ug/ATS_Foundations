=======================
はじめてのATSプログラム
=======================

ATS 言語はコンパイラを使ってそのソースコードを実行します。
別の言い方をすると OCaml のようにインタプリタを持っていません。
この章では、ATS のプログラミングをはじめる前に、単純なプログラムを作ってコンパイルしてみましょう。

何もしないプログラム
====================

最小のプログラムとは何でしょうか？
見方によりますが、多くの場合は何もしない main 関数だけを持つようなプログラムでしょう。
さっそく "何もしない ATS プログラム" を作ってみましょう。

.. literalinclude:: code/helloworld/nothing.dats
   :language: ocaml
   :linenos:

これは何もしない main 関数を持つ ATS プログラムです。
ソースコードを詳しく解説すると以下のようになるでしょう。

* ATSプログラムは main0 関数から開始されます。
* キーワード implement を使って新しい関数 main0 を定義しています。
* main0 関数は宣言済みで引数は無く、返り値は void 型です。
* 上記の main0 関数本体では何もしないまま () を返しています。この () は void 型の唯一の値です。

コンパイルと実行
================

さっそく先の "何もしない ATS プログラム" をコンパイルしてみましょう。
まずは先のソースコードを nothing.dats の名前でテキストファイルに保存しましょう。
その後、次のコマンドを入力してください。

.. literalinclude:: code/helloworld/nothing_compile.txt
   :language: shell
   :linenos:

実行ファイル a.out が生成されました。
もちろん何もしないプログラムなので、実行してもコンソールには何も表示されません。

ソースコード nothing.dats のコンパイルに patscc というコマンドを使いました。
このコマンドはどのように動作するのでしょうか？

.. figure:: fig/helloworld/patsopt.png
   :scale: 70%

上図のように patscc コマンドは内部で2つのコマンドを呼び出します。

1つ目は patsopt コマンドで、このコマンドは ATS 言語ソースコードをC言語ソースコードにコンパイルします。
この時、ATS 言語ソースコードを型検査し、型エラーが見つかればエラー終了します。
その型検査が正常終了した後、ATS 言語からC言語へのコンパイルが実行されます。

2つ目は gcc コマンドです。このコマンドはおそらく多くの読者にとって馴染み深いでしょう。
patsopt コマンドが生成したC言語ソースコードはこのコマンドで実行バイナリになります。

文字列をコンソールに表示するには
================================

patscc コマンドの使い方がわかったので、何か有意なプログラムを作ってみましょう。

.. literalinclude:: code/helloworld/helloworld.dats
   :language: ocaml
   :linenos:

このソースコードには新しい要素がいくつか登場しています。

* val は束縛の宣言です。ここでは println! 関数の返り値を void 値に束縛しています。
* println! は ATS コンパイラ内部で解釈される特殊なキーワードで、引数をコンソールに表示した後、リターンコードをコンソールに出力します。返り値は void です。

このプログラムはコンソールに "Hello, world!" という文字列を表示します。

.. literalinclude:: code/helloworld/helloworld_compile.txt
   :language: shell
   :linenos:

命令型プログラミングに慣れ親しんだ読者にとって、この実行結果は少し奇妙に見えるかもしれません。
ATS は即時評価のプログラミング言語です。
そのため概念上、次のようなことが実行時に起きます。

1. 式 println! "Hello, world!" が値 () に評価されます。この時、コンソールに "Hello, world!" という文字列が出力されます。
2. val 宣言によって = の左辺にある () と、println! "Hello, world!" の返り値である () の間に束縛ができます。
3. main0 関数が実行され、この関数は何もせずに終了します。
